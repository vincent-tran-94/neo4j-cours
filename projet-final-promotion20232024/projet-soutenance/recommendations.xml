<?xml version="1.0" encoding="UTF-8"?>
<?asciidoc-toc?>
<?asciidoc-numbered?>
<article xmlns="http://docbook.org/ns/docbook" xmlns:xl="http://www.w3.org/1999/xlink" version="5.0" xml:lang="en">
<info>
<title>Recommendations</title>
<date>2023-01-12</date>
</info>
<style type="text/css">
* {
  margin-bottom: 0.5em;
}
</style>
<section xml:id="_personalized_product_recommendations_with_neo4j">
<title>Personalized Product Recommendations with Neo4j</title>
<informalfigure>
<mediaobject>
<imageobject>
<imagedata fileref="./img/openmoviegraph.png"/>
</imageobject>
<textobject><phrase>openmoviegraph</phrase></textobject>
</mediaobject>
</informalfigure>
<section xml:id="_recommendations">
<title>Recommendations</title>
<simpara>Personalized product recommendations can increase conversions, improve sales rates and provide a better experice for users. In this Neo4j Browser guide, we&#8217;ll take a look at how you can generate graph-based real-time personalized product recommendations using a dataset of movies and movie ratings, but these techniques can be applied to many different types of products or content.</simpara>
</section>
<section xml:id="_graph_based_recommendations">
<title>Graph-Based Recommendations</title>
<simpara>Generating <emphasis role="strong">personalized recommendations</emphasis> is one of the most common use cases for a graph database. Some of the main benefits of using graphs to generate recommendations include:</simpara>
<orderedlist numeration="arabic">
<listitem>
<simpara><emphasis role="strong">Performance</emphasis>. Index-free adjacency allows for <emphasis role="strong">calculating recommendations in real time</emphasis>, ensuring the recommendation is always relevant and reflecting up-to-date information.</simpara>
</listitem>
<listitem>
<simpara><emphasis role="strong">Data model</emphasis>. The labeled property graph model allows for easily combining datasets from multiple sources, allowing enterprises to <emphasis role="strong">unlock value from previously separated data silos.</emphasis></simpara>
</listitem>
</orderedlist>
<informalfigure>
<mediaobject>
<imageobject>
<imagedata fileref="./img/title1.png" contentwidth="100%"/>
</imageobject>
<textobject><phrase>title1</phrase></textobject>
</mediaobject>
</informalfigure>
<sidebar>
<simpara>Data sources:</simpara>
<itemizedlist>
<listitem>
<simpara><link xl:href="http://www.omdbapi.com/">Open Movie Database</link></simpara>
</listitem>
<listitem>
<simpara><link xl:href="https://grouplens.org/datasets/movielens/">MovieLens</link></simpara>
</listitem>
</itemizedlist>
</sidebar>
</section>
</section>
<section xml:id="_the_open_movie_graph_data_model">
<title>The Open Movie Graph Data Model</title>
<section xml:id="_the_property_graph_model">
<title>The Property Graph Model</title>
<simpara>The data model of graph databases is called the labeled property graph model.</simpara>
<simpara><emphasis role="strong">Nodes</emphasis>: The entities in the data.</simpara>
<simpara><emphasis role="strong">Labels</emphasis>: Each node can have one or more <emphasis role="strong">label</emphasis> that specifies the type of the node.</simpara>
<simpara><emphasis role="strong">Relationships</emphasis>: Connect two nodes. They have a single direction and type.</simpara>
<simpara><emphasis role="strong">Properties</emphasis>: Key-value pair properties can be stored on both nodes and relationships.</simpara>
</section>
<section xml:id="_eliminate_data_silos">
<title>Eliminate Data Silos</title>
<simpara>In this use case, we are using graphs to combine data from multiple sources.</simpara>
<simpara><emphasis role="strong">Product Catalog</emphasis>: Data describing movies comes from the product catalog silo.</simpara>
<simpara><emphasis role="strong">User Purchases / Reviews</emphasis>: Data on user purchases and reviews comes from the user or transaction source.</simpara>
<simpara>By combining these two in the graph, we are able to query across datasets to generate personalized product recommendations.</simpara>
<informalfigure>
<mediaobject>
<imageobject>
<imagedata fileref="./img/datamodel.png" contentwidth="100%"/>
</imageobject>
<textobject><phrase>datamodel</phrase></textobject>
</mediaobject>
</informalfigure>
</section>
<section xml:id="_nodes">
<title>Nodes</title>
<simpara><literal>Movie</literal>, <literal>Actor</literal>, <literal>Director</literal>, <literal>User</literal>, <literal>Genre</literal> are the labels used in this example.</simpara>
</section>
<section xml:id="_relationships">
<title>Relationships</title>
<simpara><literal>ACTED_IN</literal>, <literal>IN_GENRE</literal>, <literal>DIRECTED</literal>, <literal>RATED</literal> are the relationships used in this example.</simpara>
</section>
<section xml:id="_properties">
<title>Properties</title>
<simpara><literal>title</literal>, <literal>name</literal>, <literal>year</literal>, <literal>rating</literal> are some of the properties used in this example.</simpara>
</section>
</section>
<section xml:id="_intro_to_cypher">
<title>Intro To Cypher</title>
<simpara>In order to work with our labeled property graph, we need a query language for graphs.</simpara>
<section xml:id="_graph_patterns">
<title>Graph Patterns</title>
<simpara>Cypher is the query language for graphs and is centered around <emphasis role="strong">graph patterns</emphasis>. Graph patterns are expressed in Cypher using ASCII-art like syntax.</simpara>
<simpara><emphasis role="strong">Nodes</emphasis></simpara>
<simpara>Nodes are defined within parentheses <literal>()</literal>. Optionally, we can specify node label(s): <literal>(:Movie)</literal></simpara>
<simpara><emphasis role="strong">Relationships</emphasis></simpara>
<simpara>Relationships are defined within square brackets <literal>[]</literal>. Optionally we can specify type and direction:</simpara>
<simpara><literal>(:Movie)<emphasis role="strong"><-[:RATED]-</emphasis>(:User)</literal></simpara>
<simpara><emphasis role="strong">Variables</emphasis></simpara>
<simpara>Graph elements can be bound to variables that can be referred to later in the query:</simpara>
<simpara><literal>(<emphasis role="strong">m</emphasis>:Movie)<-[<emphasis role="strong">r</emphasis>:RATED]-(<emphasis role="strong">u</emphasis>:User)</literal></simpara>
</section>
<section xml:id="_predicates">
<title>Predicates</title>
<simpara>Filters can be applied to these graph patterns to limit the matching paths. Boolean logic operators, regular expressions and string comparison operators can be used here within the <literal>WHERE</literal> clause, e.g. <literal>WHERE m.title CONTAINS 'Matrix'</literal></simpara>
</section>
<section xml:id="_aggregations">
<title>Aggregations</title>
<simpara>There is an implicit group of all non-aggregated fields when using aggregation functions such as <literal>count</literal>.</simpara>
<simpara>Take the <link xl:href="https://graphacademy.neo4j.com/courses/cypher-fundamentals/">Cypher Graphacademy courses</link> to learn more.
Use the <link xl:href="https://neo4j.com/docs/cypher-refcard/current/?ref=browser-guide">Cypher Refcard</link> as a syntax reference.</simpara>
</section>
<section xml:id="_dissecting_a_cypher_statement">
<title>Dissecting a Cypher Statement</title>
<simpara>Let&#8217;s look at a Cypher query that answers the question "How many reviews does each Matrix movie have?". Don&#8217;t worry if this seems complex, we&#8217;ll build up our understanding of Cypher as we move along.</simpara>
<formalpara>
<title>How many reviews does each Matrix movie have? Click on the block to put the query in the top-most window on the query editor. Hit the triangular <inlinemediaobject>
<imageobject>
<imagedata fileref="./images/icons/play-circle.png"/>
</imageobject>
<textobject><phrase>play circle</phrase></textobject>
</inlinemediaobject> button or press <keycombo><keycap>Ctrl</keycap><keycap>Enter</keycap></keycombo> to run it and see the resulting visualization.</title>
<para>
<programlisting language="cypher" linenumbering="unnumbered">MATCH (m:Movie)&lt;-[:RATED]-(u:User)
WHERE m.title CONTAINS 'Matrix'
WITH m, count(*) AS reviews
RETURN m.title AS movie, reviews
ORDER BY reviews DESC LIMIT 5;</programlisting>
</para>
</formalpara>
<informaltable frame="all" rowsep="1" colsep="1">
<?dbhtml table-width="100"?>
<?dbfo table-width="100"?>
<?dblatex table-width="100"?>
<tgroup cols="3">
<colspec colname="col_1" colwidth="70.833*"/>
<colspec colname="col_2" colwidth="212.5*"/>
<colspec colname="col_3" colwidth="141.6669*"/>
<tbody>
<row>
<entry align="left" valign="top"><simpara>find</simpara></entry>
<entry align="left" valign="top"><simpara><literal>MATCH (m:Movie)&lt;-[:RATED]-(u:User)</literal></simpara></entry>
<entry align="left" valign="top"><simpara>Search for an existing graph pattern</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>filter</simpara></entry>
<entry align="left" valign="top"><simpara><literal>WHERE m.title CONTAINS "Matrix"</literal></simpara></entry>
<entry align="left" valign="top"><simpara>Filter matching paths to only those matching a predicate</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>aggregate</simpara></entry>
<entry align="left" valign="top"><simpara><literal>WITH m, count(*) AS reviews</literal></simpara></entry>
<entry align="left" valign="top"><simpara>Count number of paths matched for each movie</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>return</simpara></entry>
<entry align="left" valign="top"><simpara><literal>RETURN m.title as movie, reviews</literal></simpara></entry>
<entry align="left" valign="top"><simpara>Specify columns to be returned by the statement</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>order</simpara></entry>
<entry align="left" valign="top"><simpara><literal>ORDER BY reviews DESC</literal></simpara></entry>
<entry align="left" valign="top"><simpara>Order by number of reviews, in descending order</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>limit</simpara></entry>
<entry align="left" valign="top"><simpara><literal>LIMIT 5;</literal></simpara></entry>
<entry align="left" valign="top"><simpara>Only return first five records</simpara></entry>
</row>
</tbody>
</tgroup>
</informaltable>
</section>
</section>
<section xml:id="_personalized_recommendations">
<title>Personalized Recommendations</title>
<simpara>Now let&#8217;s start generating some recommendations. There are two basic approaches to recommendation algorithms.</simpara>
<section xml:id="_content_based_filtering">
<title>Content-Based Filtering</title>
<simpara>Recommend items that are similar to those that a user is viewing, rated highly or purchased previously.</simpara>
<informalfigure>
<mediaobject>
<imageobject>
<imagedata fileref="./img/content1.png"/>
</imageobject>
<textobject><phrase>content1</phrase></textobject>
</mediaobject>
</informalfigure>
<formalpara>
<title>"Items similar to the item you&#8217;re looking at now"</title>
<para>
<programlisting language="cypher" linenumbering="unnumbered">MATCH p=(m:Movie {title: 'Net, The'})
       -[:ACTED_IN|IN_GENRE|DIRECTED*2]-()
RETURN p LIMIT 25</programlisting>
</para>
</formalpara>
</section>
<section xml:id="_collaborative_filtering">
<title>Collaborative Filtering</title>
<simpara>Use the preferences, ratings and actions of other users in the network to find items to recommend.</simpara>
<informalfigure>
<mediaobject>
<imageobject>
<imagedata fileref="./img/cf1.png"/>
</imageobject>
<textobject><phrase>cf1</phrase></textobject>
</mediaobject>
</informalfigure>
<formalpara>
<title>"Users who got this item, also got that other item."</title>
<para>
<programlisting language="cypher" linenumbering="unnumbered">MATCH (m:Movie {title: 'Crimson Tide'})<-[:RATED]-
      (u:User)-[:RATED]->(rec:Movie)
WITH rec, COUNT(*) AS usersWhoAlsoWatched
ORDER BY usersWhoAlsoWatched DESC LIMIT 25
RETURN rec.title AS recommendation, usersWhoAlsoWatched</programlisting>
</para>
</formalpara>
</section>
</section>
<section xml:id="_content_based_filtering_2">
<title>Content-Based Filtering</title>
<simpara>The goal of content-based filtering is to find similar items, using attributes (or traits) of the item. Using our movie data, one way we could define similarlity is movies that have common genres.</simpara>
<informalfigure>
<mediaobject>
<imageobject>
<imagedata fileref="./img/genres.png" contentwidth="100%"/>
</imageobject>
<textobject><phrase>genres</phrase></textobject>
</mediaobject>
</informalfigure>
<section xml:id="_similarity_based_on_common_genres">
<title>Similarity Based on Common Genres</title>
<formalpara>
<title>Find movies most similar to Inception based on shared genres</title>
<para>
<programlisting language="cypher" linenumbering="unnumbered">// Find similar movies by common genres
MATCH (m:Movie)-[:IN_GENRE]-&gt;(g:Genre)
              &lt;-[:IN_GENRE]-(rec:Movie)
WHERE m.title = 'Inception'
WITH rec, collect(g.name) AS genres, count(*) AS commonGenres
RETURN rec.title, genres, commonGenres
ORDER BY commonGenres DESC LIMIT 10;</programlisting>
</para>
</formalpara>
</section>
<section xml:id="_personalized_recommendations_based_on_genres">
<title>Personalized Recommendations Based on Genres</title>
<simpara>If we know what movies a user has watched, we can use this information to recommend similar movies:</simpara>
<formalpara>
<title>Recommend movies similar to those the user has already watched</title>
<para>
<programlisting language="cypher" linenumbering="unnumbered">// Content recommendation by overlapping genres
MATCH (u:User {name: 'Angelica Rodriguez'})-[r:RATED]-&gt;(m:Movie),
      (m)-[:IN_GENRE]-&gt;(g:Genre)&lt;-[:IN_GENRE]-(rec:Movie)
WHERE NOT EXISTS{ (u)-[:RATED]-&gt;(rec) }
WITH rec, g.name as genre, count(*) AS count
WITH rec, collect([genre, count]) AS scoreComponents
RETURN rec.title AS recommendation, rec.year AS year, scoreComponents,
       reduce(s=0,x in scoreComponents | s+x[1]) AS score
ORDER BY score DESC LIMIT 10</programlisting>
</para>
</formalpara>
</section>
<section xml:id="_weighted_content_algorithm">
<title>Weighted Content Algorithm</title>
<simpara>Of course there are many more traits in addition to just genre that we can consider to compute similarity, such as actors and directors.
Let&#8217;s use a weighted sum to score the recommendations based on the number of actors (3x), genres (5x) and directors (4x) they have in common to boost the score:</simpara>
<formalpara>
<title>Compute a weighted sum based on the number and types of overlapping traits</title>
<para>
<programlisting language="cypher" linenumbering="unnumbered">// Find similar movies by common genres
MATCH (m:Movie) WHERE m.title = 'Wizard of Oz, The'
MATCH (m)-[:IN_GENRE]->(g:Genre)<-[:IN_GENRE]-(rec:Movie)

WITH m, rec, count(*) AS gs

OPTIONAL MATCH (m)<-[:ACTED_IN]-(a)-[:ACTED_IN]->(rec)
WITH m, rec, gs, count(a) AS as

OPTIONAL MATCH (m)<-[:DIRECTED]-(d)-[:DIRECTED]->(rec)
WITH m, rec, gs, as, count(d) AS ds

RETURN rec.title AS recommendation,
       (5*gs)+(3*as)+(4*ds) AS score
ORDER BY score DESC LIMIT 25</programlisting>
</para>
</formalpara>
</section>
</section>
<section xml:id="_content_based_similarity_metrics">
<title>Content-Based Similarity Metrics</title>
<simpara>So far we&#8217;ve used the number of common traits as a way to score the relevance of our recommendations.
Let&#8217;s now consider a more robust way to quantify similarity, using a similarity metric.
Similarity metrics are an important component used in generating personalized recommendations that allow us to quantify how similar two items (or as we&#8217;ll see later, how similar two users preferences) are.</simpara>
<section xml:id="_jaccard_index">
<title>Jaccard Index</title>
<simpara>The Jaccard index is a number between 0 and 1 that indicates how similar two sets are.
The Jaccard index of two identical sets is 1.
If two sets do not have a common element, then the Jaccard index is 0.
The Jaccard is calculated by dividing the size of the intersection of two sets by the union of the two sets.</simpara>
<simpara>We can calculate the Jaccard index for sets of movie genres to determine how similar two movies are.</simpara>
<formalpara>
<title>What movies are most similar to Inception based on Jaccard similarity of genres?</title>
<para>
<programlisting language="cypher" linenumbering="unnumbered">MATCH (m:Movie {title:'Inception'})-[:IN_GENRE]-&gt;
      (g:Genre)&lt;-[:IN_GENRE]-(other:Movie)
WITH m, other, count(g) AS intersection, collect(g.name) as common

WITH m,other, intersection, common,
     [(m)-[:IN_GENRE]-&gt;(mg) | mg.name] AS set1,
     [(other)-[:IN_GENRE]-&gt;(og) | og.name] AS set2

WITH m,other,intersection, common, set1, set2,
     set1+[x IN set2 WHERE NOT x IN set1] AS union

RETURN m.title, other.title, common, set1,set2,
       ((1.0*intersection)/size(union)) AS jaccard

ORDER BY jaccard DESC LIMIT 25</programlisting>
</para>
</formalpara>
<simpara>We can apply this same approach to all "traits" of the movie (genre, actors, directors, etc.):</simpara>
<programlisting language="cypher" linenumbering="unnumbered">MATCH (m:Movie {title: 'Inception'})-[:IN_GENRE|ACTED_IN|DIRECTED]-
                   (t)<-[:IN_GENRE|ACTED_IN|DIRECTED]-(other:Movie)
WITH m, other, count(t) AS intersection, collect(t.name) AS common,
     [(m)-[:IN_GENRE|ACTED_IN|DIRECTED]-(mt) | mt.name] AS set1,
     [(other)-[:IN_GENRE|ACTED_IN|DIRECTED]-(ot) | ot.name] AS set2

WITH m,other,intersection, common, set1, set2,
     set1 + [x IN set2 WHERE NOT x IN set1] AS union

RETURN m.title, other.title, common, set1,set2,
       ((1.0*intersection)/size(union)) AS jaccard
ORDER BY jaccard DESC LIMIT 25</programlisting>
</section>
</section>
<section xml:id="_collaborative_filtering_leveraging_movie_ratings">
<title>Collaborative Filtering – Leveraging Movie Ratings</title>
<informalfigure>
<mediaobject>
<imageobject>
<imagedata fileref="./img/cf2.png" contentwidth="100%"/>
</imageobject>
<textobject><phrase>cf2</phrase></textobject>
</mediaobject>
</informalfigure>
<simpara>Notice that we have user-movie ratings in our graph.
The collaborative filtering approach is going to make use of this information to find relevant recommendations.</simpara>
<simpara>Steps:</simpara>
<orderedlist numeration="arabic">
<listitem>
<simpara>Find similar users in the network (our peer group).</simpara>
</listitem>
<listitem>
<simpara>Assuming that similar users have similar preferences, what are the movies those similar users like?</simpara>
</listitem>
</orderedlist>
<formalpara>
<title>Show all ratings by Misty Williams</title>
<para>
<programlisting language="cypher" linenumbering="unnumbered">// Show all ratings by Misty Williams
MATCH (u:User {name: 'Misty Williams'})
MATCH (u)-[r:RATED]-&gt;(m:Movie)
RETURN *
LIMIT 100;</programlisting>
</para>
</formalpara>
<formalpara>
<title>Find Misty&#8217;s average rating</title>
<para>
<programlisting language="cypher" linenumbering="unnumbered">// Show average ratings by Misty Williams
MATCH (u:User {name: 'Misty Williams'})
MATCH (u)-[r:RATED]-&gt;(m:Movie)
RETURN avg(r.rating) AS average;</programlisting>
</para>
</formalpara>
<formalpara>
<title>What are the movies that Misty liked more than average?</title>
<para>
<programlisting language="cypher" linenumbering="unnumbered">// What are the movies that Misty liked more than average?
MATCH (u:User {name: 'Misty Williams'})
MATCH (u)-[r:RATED]-&gt;(m:Movie)
WITH u, avg(r.rating) AS average
MATCH (u)-[r:RATED]-&gt;(m:Movie)
WHERE r.rating &gt; average
RETURN *
LIMIT 100;</programlisting>
</para>
</formalpara>
</section>
<section xml:id="_collaborative_filtering_the_wisdom_of_crowds">
<title>Collaborative Filtering – The Wisdom of Crowds</title>
<section xml:id="_simple_collaborative_filtering">
<title>Simple Collaborative Filtering</title>
<simpara>Here we just use the fact that someone has rated a movie, not their actual rating to demonstrate the structure of finding the peers.
Then we look at what else the peers rated, that the user has not rated themselves yet.</simpara>
<programlisting language="cypher" linenumbering="unnumbered">MATCH (u:User {name: 'Cynthia Freeman'})-[:RATED]->
      (:Movie)<-[:RATED]-(peer:User)
MATCH (peer)-[:RATED]->(rec:Movie)
WHERE NOT EXISTS { (u)-[:RATED]->(rec) }
RETURN rec.title, rec.year, rec.plot
LIMIT 25</programlisting>
<simpara>Of course this is just a simple appraoch, there are many problems with this query, such as not normalizing based on popularity or not taking ratings into consideration.
We&#8217;ll do that next, looking at movies being rated similarly, and then picking highly rated movies and using their rating and frequency to sort the results.</simpara>
<programlisting language="cypher" linenumbering="unnumbered">MATCH (u:User {name: 'Cynthia Freeman'})-[r1:RATED]->
      (:Movie)<-[r2:RATED]-(peer:User)
WHERE abs(r1.rating-r2.rating) < 2 // similarly rated
WITH distinct u, peer
MATCH (peer)-[r3:RATED]->(rec:Movie)
WHERE r3.rating > 3
  AND NOT EXISTS { (u)-[:RATED]->(rec) }
WITH rec, count(*) as freq, avg(r3.rating) as rating
RETURN rec.title, rec.year, rating, freq, rec.plot
ORDER BY rating DESC, freq DESC
LIMIT 25</programlisting>
<simpara>In the next section, we will see how we can improve this approach using the <emphasis role="strong">kNN method</emphasis>.</simpara>
</section>
<section xml:id="_only_consider_genres_liked_by_the_user">
<title>Only Consider Genres Liked by the User</title>
<simpara>Many recommender systems are a blend of collaborative filtering and content-based approaches:</simpara>
<formalpara>
<title>For a particular user, what genres have a higher-than-average rating? Use this to score similar movies</title>
<para>
<programlisting language="cypher" linenumbering="unnumbered">// compute mean rating
MATCH (u:User {name: 'Andrew Freeman'})-[r:RATED]->(m:Movie)
WITH u, avg(r.rating) AS mean

// find genres with higher than average rating and their number of rated movies
MATCH (u)-[r:RATED]->(m:Movie)
       -[:IN_GENRE]->(g:Genre)
WHERE r.rating > mean

WITH u, g, count(*) AS score

// find movies in those genres, that have not been watched yet
MATCH (g)<-[:IN_GENRE]-(rec:Movie)
WHERE NOT EXISTS { (u)-[:RATED]->(rec) }

// order by sum of scores
RETURN rec.title AS recommendation, rec.year AS year,
       sum(score) AS sscore,
       collect(DISTINCT g.name) AS genres
ORDER BY sscore DESC LIMIT 10</programlisting>
</para>
</formalpara>
</section>
</section>
<section xml:id="_collaborative_filtering_similarity_metrics">
<title>Collaborative Filtering – Similarity Metrics</title>
<simpara>We use similarity metrics to quantify how similar two users or two items are.
We&#8217;ve already seen Jaccard similarity used in the context of content-based filtering.
Now, we&#8217;ll see how similarity metrics are used with collaborative filtering.</simpara>
<section xml:id="_cosine_distance">
<title>Cosine Distance</title>
<simpara>Jaccard similarity was useful for comparing movies and is essentially comparing two sets (groups of genres, actors, directors, etc.).
However, with movie ratings each relationship has a <emphasis role="strong">weight</emphasis> that we can consider as well.</simpara>
</section>
<section xml:id="_cosine_similarity">
<title>Cosine Similarity</title>
<informalfigure>
<mediaobject>
<imageobject>
<imagedata fileref="./img/cosine.png" contentwidth="400px"/>
</imageobject>
<textobject><phrase>cosine</phrase></textobject>
</mediaobject>
</informalfigure>
<simpara>The cosine similarity of two users will tell us how similar two users' preferences for movies are.
Users with a high cosine similarity will have similar preferences.</simpara>
<formalpara>
<title>Find the users with the most similar preferences to Cynthia Freeman, according to cosine similarity</title>
<para>
<programlisting language="cypher" linenumbering="unnumbered">// Most similar users using Cosine similarity
MATCH (p1:User {name: "Cynthia Freeman"})-[x:RATED]->
      (m:Movie)<-[y:RATED]-(p2:User)
WITH p1, p2, count(m) AS numbermovies,
     sum(x.rating * y.rating) AS xyDotProduct,
     collect(x.rating) as xRatings, collect(y.rating) as yRatings
WHERE numbermovies > 10
WITH p1, p2, xyDotProduct,
sqrt(reduce(xDot = 0.0, a IN xRatings | xDot + a^2)) AS xLength,
sqrt(reduce(yDot = 0.0, b IN yRatings | yDot + b^2)) AS yLength
RETURN p1.name, p2.name, xyDotProduct / (xLength * yLength) AS sim
ORDER BY sim DESC
LIMIT 100;</programlisting>
</para>
</formalpara>
<simpara>We can also compute this measure using the <link xl:href="https://neo4j.com/docs/graph-data-science/current/alpha-algorithms/cosine/">Cosine Similarity algorithm</link> in the Neo4j Graph Data Science Library.</simpara>
<formalpara>
<title>Find the users with the most similar preferences to Cynthia Freeman, according to cosine similarity function</title>
<para>
<programlisting language="cypher" linenumbering="unnumbered">MATCH (p1:User {name: 'Cynthia Freeman'})-[x:RATED]-&gt;(movie)&lt;-[x2:RATED]-(p2:User)
WHERE p2 &lt;&gt; p1
WITH p1, p2, collect(x.rating) AS p1Ratings, collect(x2.rating) AS p2Ratings
WHERE size(p1Ratings) &gt; 10
RETURN p1.name AS from,
       p2.name AS to,
       gds.similarity.cosine(p1Ratings, p2Ratings) AS similarity
ORDER BY similarity DESC</programlisting>
</para>
</formalpara>
</section>
</section>
<section xml:id="_collaborative_filtering_similarity_metrics_2">
<title>Collaborative Filtering – Similarity Metrics</title>
<section xml:id="_pearson_similarity">
<title>Pearson Similarity</title>
<simpara>Pearson similarity, or Pearson correlation, is another similarity metric we can use.
This is particularly well-suited for product recommendations because it takes into account the fact that different users will have different <emphasis role="strong">mean ratings</emphasis>: on average some users will tend to give higher ratings than others.
Since Pearson similarity considers differences about the mean, this metric will account for these discrepancies.</simpara>
<informalfigure>
<mediaobject>
<imageobject>
<imagedata fileref="./img/pearson.png" contentwidth="400px"/>
</imageobject>
<textobject><phrase>pearson</phrase></textobject>
</mediaobject>
</informalfigure>
<formalpara>
<title>Find users most similar to Cynthia Freeman, according to Pearson similarity</title>
<para>
<programlisting language="cypher" linenumbering="unnumbered">MATCH (u1:User {name:"Cynthia Freeman"})-[r:RATED]-&gt;(m:Movie)
WITH u1, avg(r.rating) AS u1_mean

MATCH (u1)-[r1:RATED]-&gt;(m:Movie)&lt;-[r2:RATED]-(u2)
WITH u1, u1_mean, u2, collect({r1: r1, r2: r2}) AS ratings
WHERE size(ratings) &gt; 10

MATCH (u2)-[r:RATED]-&gt;(m:Movie)
WITH u1, u1_mean, u2, avg(r.rating) AS u2_mean, ratings

UNWIND ratings AS r

WITH sum( (r.r1.rating-u1_mean) * (r.r2.rating-u2_mean) ) AS nom,
     sqrt( sum( (r.r1.rating - u1_mean)^2) * sum( (r.r2.rating - u2_mean) ^2)) AS denom,
     u1, u2 WHERE denom &lt;&gt; 0

RETURN u1.name, u2.name, nom/denom AS pearson
ORDER BY pearson DESC LIMIT 100</programlisting>
</para>
</formalpara>
<simpara>We can also compute this measure using the <link xl:href="https://neo4j.com/docs/graph-data-science/current/alpha-algorithms/pearson/">Pearson Similarity algorithm</link> in the Neo4j Graph Data Science Library.</simpara>
<formalpara>
<title>Find users most similar to Cynthia Freeman, according to the Pearson similarity function</title>
<para>
<programlisting language="cypher" linenumbering="unnumbered">MATCH (p1:User {name: 'Cynthia Freeman'})-[x:RATED]-&gt;(movie)&lt;-[x2:RATED]-(p2:User)
WHERE p2 &lt;&gt; p1
WITH p1, p2, collect(x.rating) AS p1Ratings, collect(x2.rating) AS p2Ratings
WHERE size(p1Ratings) &gt; 10
RETURN p1.name AS from,
       p2.name AS to,
       gds.similarity.pearson(p1Ratings, p2Ratings) AS similarity
ORDER BY similarity DESC</programlisting>
</para>
</formalpara>
</section>
</section>
<section xml:id="_collaborative_filtering_neighborhood_based_recommendations">
<title>Collaborative Filtering – Neighborhood-Based Recommendations</title>
<section xml:id="_knn_k_nearest_neighbors">
<title>kNN – K-Nearest Neighbors</title>
<simpara>Now that we have a method for finding similar users based on preferences, the next step is to allow each of the <emphasis role="strong">k</emphasis> most similar users to vote for what items should be recommended.</simpara>
<simpara>Essentially:</simpara>
<simpara>"Who are the 10 users with tastes in movies most similar to mine? What movies have they rated highly that I haven&#8217;t seen yet?"</simpara>
<formalpara>
<title>kNN movie recommendation using Pearson similarity</title>
<para>
<programlisting language="cypher" linenumbering="unnumbered">MATCH (u1:User {name:"Cynthia Freeman"})-[r:RATED]->(m:Movie)
WITH u1, avg(r.rating) AS u1_mean

MATCH (u1)-[r1:RATED]->(m:Movie)<-[r2:RATED]-(u2)
WITH u1, u1_mean, u2, COLLECT({r1: r1, r2: r2}) AS ratings WHERE size(ratings) > 10

MATCH (u2)-[r:RATED]->(m:Movie)
WITH u1, u1_mean, u2, avg(r.rating) AS u2_mean, ratings

UNWIND ratings AS r

WITH sum( (r.r1.rating-u1_mean) * (r.r2.rating-u2_mean) ) AS nom,
     sqrt( sum( (r.r1.rating - u1_mean)^2) * sum( (r.r2.rating - u2_mean) ^2)) AS denom,
     u1, u2 WHERE denom <> 0

WITH u1, u2, nom/denom AS pearson
ORDER BY pearson DESC LIMIT 10

MATCH (u2)-[r:RATED]->(m:Movie) WHERE NOT EXISTS( (u1)-[:RATED]->(m) )

RETURN m.title, SUM( pearson * r.rating) AS score
ORDER BY score DESC LIMIT 25</programlisting>
</para>
</formalpara>
</section>
</section>
<section xml:id="_further_work">
<title>Further Work</title>
<section xml:id="_resources">
<title>Resources</title>
<itemizedlist>
<listitem>
<simpara>Web <link xl:href="https://neo4j.com/docs/cypher-refcard/current/?ref=browser-guide">Cypher Refcard</link></simpara>
</listitem>
<listitem>
<simpara>Web <link xl:href="https://neo4j.com/docs/?ref=browser-guide">Neo4j Documentation</link></simpara>
</listitem>
<listitem>
<simpara>Blog Post <link xl:href="https://neo4j.com/blog/collaborative-filtering-creating-teams/?ref=browser-guide">Collaborative Filtering: Creating the Best Teams Ever</link></simpara>
</listitem>
<listitem>
<simpara>Video <link xl:href="https://www.youtube.com/watch?v=60E2WV4iwIg">Data Science and Recommendations</link></simpara>
</listitem>
<listitem>
<simpara>Web <link xl:href="https://neo4j.com/use-cases/real-time-recommendation-engine/?ref=browser-guide">Use-Case: Real-Time Recommendation Engines</link></simpara>
</listitem>
<listitem>
<simpara>Article: <link xl:href="https://neo4j.com/developer-blog/exploring-practical-recommendation-systems-in-neo4j/">Exploring Practical Recommendation Systems In Neo4j</link></simpara>
</listitem>
<listitem>
<simpara>Book (free download) <link xl:href="https://neo4j.com/graph-data-science-for-dummies/">Graph Data Science For Dummies</link></simpara>
</listitem>
</itemizedlist>
</section>
<section xml:id="_exercises">
<title>Exercises</title>
<simpara>Extend these queries:</simpara>
<variablelist>
<varlistentry>
<term>Temporal component</term>
<listitem>
<simpara>Preferences change over time, use the rating timestamp to consider how more recent ratings might be used to find more relevant recommendations.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>Keyword extraction</term>
<listitem>
<simpara>Enhance the traits available using the plot description.<?asciidoc-br?>
How would you model extracted keywords for movies?</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>Image recognition using posters</term>
<listitem>
<simpara>There are several libraries and APIs that offer image recognition and tagging.<?asciidoc-br?>
Since we have movie poster images for each movie, how could we use these to enhance our recomendations?</simpara>
</listitem>
</varlistentry>
</variablelist>
</section>
</section>
</article>